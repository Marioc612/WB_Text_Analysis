read.csv(here('Settings/stop_words.csv'), head = FALSE)$V1)
# Import the data used for training the model
data_training <- read.csv(here('Settings/Training_data.csv'),
header = TRUE,
sep = ',')
View(data_training)
unique(data_training$Target)
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(tm)
library(SnowballC)
library(caTools)
library(randomForest)
library(showtext)
source(here('src', 'DataReader.R'))
source(here('src', 'Mapper.R'))
source(here('src', 'ViewResults.R'))
# --------------------------- or Using previously pre-processed results
tidy <- from_saves('Test')
results <- tidy %>%
mutate(Target = 'A')
# Import the data used for training the model
data_training <- read.csv(here('Settings/Training_data.csv'),
header = TRUE,
sep = ',')
# Combine the training data set with the extracted texts
data_complete <- rbind(data_training,
results)
data_complete <- data_complete %>%
mutate(Text = str_replace_all(data_complete$Text, '[^A-Za-z ]', ''))
# Capturing the data sets' length
nrows_data_t <- nrow(data_training)
nrows_data_c <- nrow(data_complete)
rm(dataset_original)
# Create a Document Term Matrix (DTM)
dtm <- corpus_dtm(data_complete)
t0 <- Sys.time()
working_dataset <- codify(dtm, data_complete)
tf <- Sys.time()
print(tf - t0)
# We don't need *dtm* anymore, so we remove it from the environment
rm(dtm)
# Create the model and split the data in train and test
set.seed(612)
# Select training data
x_train <- working_dataset[1:nrows_data_t,]
x_train$Target <- factor(x_train$Target)
# Select test data
x_test <- working_dataset[nrows_data_t:nrows_data_c,]
x_test <- x_test %>% slice(-1)
x_test$Target <- factor(x_test$Target)
ncols_dtm <- dim(x_train)[2]
t0 <- Sys.time()
classifier <- randomForest(x = x_train[, -ncols_dtm],
y = x_train$Target,
ntree = 101)
rm(x_train)
tf <- Sys.time()
print(tf - t0)
t0 <- Sys.time()
y_pred <- predict(classifier, newdata = x_test[, -ncols_dtm])
rm(x_test)
tf <- Sys.time()
print(tf - t0)
# Save the results
classified <- character()
for (goal in y_pred) {classified = c(classified, goal)}
# Subset the data frame and paste the classified data
results <- data_complete %>%
slice(nrows_data_t+1: nrows_data_c)
rm(data_complete)
results$Target <- classified
results <- identify_SDGs(results)
results <- results %>% dplyr::filter(SDG %in% glue("SDG {1:17}"))
results <- as_tibble(results)
View(results)
# Total matches by project -------------------------------> can feed a histogram
matches_T <- count_matches(results,
by = 'total_matches',
sorted = 'Frequency')
# Total matches by Project and SDG ---------------------> can feed a column plot
matches_SDG <- count_matches(results,
by = 'SDG',
sorted = 'Frequency',
collapse_projects = TRUE)
# Total matches by Project and Target ------------------> can be exported as csv
matches_tgt <- count_matches(results,
by = 'Target',
sorted = 'Frequency',
collapse_projects = TRUE)
# Binary occurrence results by SDG ---------------------> can be exported as csv
occurrence_SDG <- count_occurrence(results,
by = 'SDG',
collapse_projects = TRUE)
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = FALSE)
SDGs_proj <- get_SDGs_proj(results)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
View(matrix_absolute)
initialise_fonts()
occ <- occurrence_SDG %>% plot_results(
title = 'Testing',
xlabel = 'SDG',
ylabel = 'Number of projects',
fontsize_barlabs = 7,
#  fontsize_title = 50,
# fontsize_axis = 30,
scale = 1,
dpi = 96)
occ
matches <- matches_SDG %>% plot_results(
title = 'Testing 2',
xlabel ='SDG',
ylabel ='Number of matches',fontsize_barlabs = 5,
scale = 2)
matches
main_SDG <- main_SDGs %>% plot_results(
title = 'Main SDG',
xlabel = 'SDG',
ylabel = 'Number of projects',
scale = 1)
main_SDG
main_SDG <- main_SDGs %>% plot_results(
title = 'Main SDG',
xlabel = 'SDG',
ylabel = 'Number of projects',
scale = 1,
fontsize_barlabs = 4)
main_SDG
histo <- results %>% plot_SDG_distribution(
binwidth = 2,
title = "Testing 3",
test = TRUE)
histo
# Generate network from results --------------------
net <- generate_network(results)
graph <- plot_network(results)
graph
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = FALSE)
View(main_SDGs)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
main_SDGs$SDG
matrix_absolute$Main_SDG
source("~/GitHub/WB_Text_Analysis/src/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
source("~/GitHub/WB_Text_Analysis/src/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = FALSE)
main_SDGs %>%
group_by(Project) %>%
sample(1)
main_SDGs %>%
group_by(Project) %>%
slice(1)
main_SDGs %>%
arrange(str_sort(SDG, numeric = TRUE)) %>%
group_by(Project) %>%
slice(1)
source("~/GitHub/WB_Text_Analysis/src/ViewResults.R")
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = FALSE)
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = TRUE)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
source("~/GitHub/WB_Text_Analysis/src/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
source("~/GitHub/WB_Text_Analysis/src/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
View(matrix_relative)
initialise_fonts()
occ <- occurrence_SDG %>% plot_results(
title = 'Testing',
xlabel = 'SDG',
ylabel = 'Number of projects',
fontsize_barlabs = 7,
#  fontsize_title = 50,
# fontsize_axis = 30,
scale = 1,
dpi = 96)
occurrence_SDG %>% plot_results(
title = 'Testing',
xlabel = 'SDG',
ylabel = 'Number of projects',
fontsize_barlabs = 7,
#  fontsize_title = 50,
# fontsize_axis = 30,
scale = 1,
dpi = 96)
matches_SDG %>% plot_results(
title = 'Testing 2',
xlabel ='SDG',
ylabel ='Number of matches',fontsize_barlabs = 5,
scale = 2)
occurrence_SDG %>% plot_results(
title = 'Occurrence of the SDGs',
subtitle = "Across the World Bank's portfolio"
xlabel = 'SDG',
occurrence_SDG %>% plot_results(
title = 'Occurrence of the SDGs',
subtitle = "Across the World Bank's portfolio",
xlabel = 'SDG',
ylabel = 'Number of projects',
fontsize_barlabs = 7,
#  fontsize_title = 50,
# fontsize_axis = 30,
scale = 1,
dpi = 96)
matches_SDG %>% plot_results(
title = 'Match frequency',
subtitle = 'Of the SDGs'
xlabel ='SDG',
matches_SDG %>% plot_results(
title = 'Match frequency',
subtitle = 'Of the SDGs',
xlabel ='SDG',
ylabel ='Number of matches',fontsize_barlabs = 5,
scale = 2)
source("~/GitHub/WB_Text_Analysis/src/ViewResults.R")
matches_SDG %>% plot_results(
title = 'Match frequency',
subtitle = 'Of the SDGs',
xlabel ='SDG',
ylabel ='Number of matches',fontsize_barlabs = 5,
scale = 2)
main_SDGs %>% plot_results(
title = 'Main SDG',
xlabel = 'SDG',
ylabel = 'Number of projects',
scale = 1,
fontsize_barlabs = 4)
main_SDGs %>% plot_results(
title = 'Predominant SDGs',
xlabel = "In the World Bank's portfolio",
ylabel = 'Number of projects',
scale = 1,
fontsize_barlabs = 4)
main_SDGs %>% plot_results(
title = 'Predominant SDGs',
xlabel = "In the World Bank's portfolio",
ylabel = 'Number of projects',
scale = 1)
main_SDGs %>% plot_results(
title = 'Predominant SDGs',
xlabel = "In the World Bank's portfolio",
ylabel = 'Number of projects',
scale = 1,
fontsize_barlabs = 10)
main_SDGs %>% plot_results(
title = 'Predominant SDGs',
xlabel = "In the World Bank's portfolio",
ylabel = 'Number of projects',
scale = 1,
fontsize_barlabs = 8)
main_SDGs %>% plot_results(
title = 'Predominant SDGs',
subtitle = "In the World Bank's portfolio",
xlabel = 'SDG',
ylabel = 'Number of projects',
scale = 1,
fontsize_barlabs = 8)
results %>% plot_SDG_distribution(
binwidth = 2,
title = "Testing 3",
test = TRUE)
graph <- plot_network(results)
graph
results %>% plot_SDG_distribution(
binwidth = 2,
title = "Distribution of the number of projects",
subtitle = 'Regarding their total number of mapped SDGs',
test = TRUE)
source("~/GitHub/WB_Text_Analysis/src/ViewResults.R")
source("~/GitHub/WB_Text_Analysis/src/ViewResults.R")
results %>% plot_SDG_distribution(
binwidth = 2,
title = "Distribution of the number of projects",
subtitle = 'Regarding their total number of mapped SDGs',
test = TRUE)
results %>% plot_SDG_distribution(
binwidth = 2,
title = "Distribution of the number of projects",
subtitle = 'According to their total number of mapped SDGs',
test = TRUE)
results %>% plot_SDG_distribution(
binwidth = 2,
title = "Distribution of the number of projects",
subtitle = 'According to their total number of mapped SDGs')
results %>% plot_SDG_distribution(
binwidth = 2,
title = "Distribution of the number of projects",
subtitle = 'According to their total number of mapped SDGs')
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(tm)
library(SnowballC)
library(caTools)
library(randomForest)
library(showtext)
source(here('src', 'DataReader.R'))
source(here('src', 'Mapper.R'))
source(here('src', 'ViewResults.R'))
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(tm)
library(SnowballC)
library(caTools)
library(randomForest)
library(showtext)
source(here('src', 'DataReader.R'))
source(here('src', 'Mapper.R'))
source(here('src', 'ViewResults.R'))
# ====== Loading the saved data instead of processing it again =================
texts <- extract('PADs')
# You can tidy the extracted texts
tidy <- tidify(texts,
token='sentences',
low_lim = 0.65,
up_lim = 0.7,
export_json = TRUE,
version_name = 'Test')
results <- tidy %>%
mutate(Target = 'A')
# Import the data used for training the model
data_training <- read.csv(here('Settings/Training_data.csv'),
header = TRUE,
sep = ',')
# Combine the training data set with the extracted texts
data_complete <- rbind(data_training,
results)
data_complete <- data_complete %>%
mutate(Text = str_replace_all(data_complete$Text, '[^A-Za-z ]', ''))
# Capturing the data sets' length
nrows_data_t <- nrow(data_training)
nrows_data_c <- nrow(data_complete)
# Create a Document Term Matrix (DTM)
dtm <- corpus_dtm(data_complete)
# Create working data set
t0 <- Sys.time()
working_dataset <- codify(dtm, data_complete)
tf <- Sys.time()
print(tf - t0)
# We don't need *dtm* anymore, so we remove it from the environment
rm(dtm)
# Create the model and split the data in train and test
set.seed(612)
# Select training data
x_train <- working_dataset[1:nrows_data_t,]
x_train$Target <- factor(x_train$Target)
# Select test data
x_test <- working_dataset[nrows_data_t:nrows_data_c,]
x_test <- x_test %>% slice(-1)
x_test$Target <- factor(x_test$Target)
rm(working_dataset)
ncols_dtm <- dim(x_train)[2]
t0 <- Sys.time()
classifier <- randomForest(x = x_train[, -ncols_dtm],
y = x_train$Target,
ntree = 51)
rm(x_train)
tf <- Sys.time()
print(tf - t0)
t0 <- Sys.time()
y_pred <- predict(classifier, newdata = x_test[, -ncols_dtm])
rm(x_test)
tf <- Sys.time()
print(tf - t0)
# Save the results
classified <- character()
for (goal in y_pred) {classified = c(classified, goal)}
# Subset the data frame and paste the classified data
results <- data_complete %>%
slice(nrows_data_t+1: nrows_data_c)
rm(data_complete)
results$Target <- classified
results <- identify_SDGs(results)
results <- results %>% dplyr::filter(SDG %in% glue("SDG {1:17}"))
results <- as_tibble(results)
# Total matches by project -------------------------------> can feed a histogram
matches_T <- count_matches(results,
by = 'total_matches',
sorted = 'Frequency')
# Total matches by Project and SDG ---------------------> can feed a column plot
matches_SDG <- count_matches(results,
by = 'SDG',
sorted = 'Frequency',
collapse_projects = TRUE)
# Total matches by Project and Target ------------------> can be exported as csv
matches_tgt <- count_matches(results,
by = 'Target',
sorted = 'Frequency',
collapse_projects = TRUE)
# Binary occurrence results by SDG ---------------------> can be exported as csv
occurrence_SDG <- count_occurrence(results,
by = 'SDG',
collapse_projects = TRUE)
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = TRUE)
SDGs_proj <- get_SDGs_proj(results)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
initialise_fonts()
occurrence_SDG %>% plot_results(
title = 'Occurrence of the SDGs',
subtitle = "Across the World Bank's portfolio",
xlabel = 'SDG',
ylabel = 'Number of projects',
fontsize_barlabs = 7,
#  fontsize_title = 50,
# fontsize_axis = 30,
scale = 1,
dpi = 96)
matches_SDG %>% plot_results(
title = 'Match frequency of the SDGs',
subtitle = "Across the World Bank's portfolio",
xlabel ='SDG',
ylabel ='Number of matches',fontsize_barlabs = 5,
scale = 2)
main_SDGs %>% plot_results(
title = 'Predominant SDGs',
subtitle = "In the World Bank's portfolio",
xlabel = 'SDG',
ylabel = 'Number of projects',
scale = 1,
fontsize_barlabs = 8)
results %>% plot_SDG_distribution(
binwidth = 2,
title = "Distribution of the number of projects",
subtitle = 'According to their total number of mapped SDGs')
graph <-
plot_network(results)
graph <- plot_network(results)
graph
