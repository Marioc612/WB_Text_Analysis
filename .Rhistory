net <- rate_network(results)
# Generate network from results --------------------
net <- generate_network(results)
graph <- plot_network(results,
fontsize_base = 23,
fontsize_title = 40,
fontsize_subt = 30,
dpi = 96,
scale = 1)
graph
source("~/GitHub/WB_Text_Analysis/src/ViewResults.R")
install.packages("tinytex")
tinytex__install_tinytex()
tinytex::install_tinytex()
main_SDGs %>% plot_results(
title = 'Predominant SDGs',
subtitle = 'Across the portfolio',
xlabel = 'SDG',
ylabel = 'Number of projects',
scale = 1)
View(main_SDGs)
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = TRUE)
main_SDGs %>% plot_results(
title = 'Predominant SDGs',
subtitle = 'Across the portfolio',
xlabel = 'SDG',
ylabel = 'Number of projects',
scale = 1)
t0 <- Sys.time()
y_pred <- predict(classifier, newdata = x_test[, -ncols_dtm])
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(tm)
library(SnowballC)
library(caTools)
library(randomForest)
library(showtext)
source(here('src', 'DataReader.R'))
source(here('src', 'ViewResults.R'))
aaa <- read.csv("C:\Users\JuanBetancur\OneDrive - SEI\World Bank PoC SDG connections methodology\FY_2022\Previous methodology\data")
aaa <- read.csv("C:/Users/JuanBetancur/OneDrive - SEI/World Bank PoC SDG connections methodology/FY_2022/Previous methodology/data/Percent.csv")
colnames(aaa)
str_replace_all(colnames(aaa), 'SDG.', '')
colnames(aaa) <- str_replace_all(colnames(aaa), 'SDG.', '')
aaa
View(aaa)
colnames(aaa)
aaa %>% select(-N.of.Documents)
aaa <- aaa %>% %>% select(-N.of.Documents)
aaa <- aaa %>% select(-N.of.Documents)
aaa <- read.csv("C:/Users/JuanBetancur/OneDrive - SEI/World Bank PoC SDG connections methodology/FY_2022/Previous methodology/data/Percent.csv")
aaa <- aaa %>% select(-N.of.Documents)
aaa
b <- aaa %>% gather(Target, Frequency, SDG.1.1:SDG.17.19)
View(b)
b <- b %>%
mutate(Target = str_replace_all(b, 'SDG.', 'SDG '),
Frequency = str_split(Frequency, ' ')[[1]])
b <- b %>%
mutate(Target = str_replace_all(b, 'SDG.', 'SDG '))
b <- b %>%
mutate(Target = str_replace_all(Target, 'SDG.', 'SDG '))
b <- b %>%
mutate(Frequency = str_split(Frequency, ' ')[[1]])
b <- b %>%
mutate(Frequency = str_split(Frequency, ' ')[1])
aaa <- read.csv("C:/Users/JuanBetancur/OneDrive - SEI/World Bank PoC SDG connections methodology/FY_2022/Previous methodology/data/Percent.csv")
aaa <- aaa %>% select(-N.of.Documents)
b <- aaa %>% gather(Target, Frequency, SDG.1.1:SDG.17.19)
str_split(b$Frequency, ' ')
b$Frequency
b <- b %>%
mutate(Frequency = str_split(Frequency, '   '))
aaa <- read.csv("C:/Users/JuanBetancur/OneDrive - SEI/World Bank PoC SDG connections methodology/FY_2022/Previous methodology/data/Percent.csv")
aaa <- aaa %>% select(-N.of.Documents)
b <- aaa %>% gather(Target, Frequency, SDG.1.1:SDG.17.19)
b <- b %>%
mutate(Target = str_replace_all(Target, 'SDG.', 'SDG '))
b <- b %>%
mutate(Frequency = str_split(Frequency, '   ')[1])
aaa <- read.csv("C:/Users/JuanBetancur/OneDrive - SEI/World Bank PoC SDG connections methodology/FY_2022/Previous methodology/data/Percent.csv")
aaa <- aaa %>% select(-N.of.Documents)
b <- aaa %>% gather(Target, Frequency, SDG.1.1:SDG.17.19)
b <- b %>%
mutate(Target = str_replace_all(Target, 'SDG.', 'SDG '))
b <- b %>%
mutate(Frequency = str_split(Frequency, '   ')[[1]])
b <- b %>%
mutate(Frequency = str_split(Frequency, '   ')[1])
aaa <- read.csv("C:/Users/JuanBetancur/OneDrive - SEI/World Bank PoC SDG connections methodology/FY_2022/Previous methodology/data/Percent.csv")
aaa <- aaa %>% select(-N.of.Documents)
b <- aaa %>% gather(Target, Frequency, SDG.1.1:SDG.17.19)
b <- b %>%
mutate(Target = str_replace_all(Target, 'SDG.', 'SDG '))
str_split(b$Frequency, '   ')[1]
b <- b %>%
mutate(Frequency = str_split(Frequency, '   ')[[1]])
b <- b %>%
mutate(Frequency = str_split(Frequency, '   ')[1])
aaa <- read.csv("C:/Users/JuanBetancur/OneDrive - SEI/World Bank PoC SDG connections methodology/FY_2022/Previous methodology/data/Percent.csv")
aaa <- aaa %>% select(-N.of.Documents)
b <- aaa %>% gather(Target, Frequency, SDG.1.1:SDG.17.19)
b <- b %>%
mutate(Target = str_replace_all(Target, 'SDG.', 'SDG '))
str_split(b$Frequency, '   ')[1]
str_split(b$Frequency, '   ')[[1]]
b$Frequency
str_split(b$Frequency, '   ')
str_split(b$Frequency, '   ')[[1]]
str_split(b$Frequency, '   ')[1]
str_split(b$Frequency, '   ')[][[1]]
str_split(b$Frequency, '   ')
b <- b %>%
separate(Frequency, Frequency, Percent, '   ')
b <- b %>%
separate(Frequency, Frequency, '   ')
b <- b %>%
separate(data = Frequency, into = Frequency, sep = '   ')
b <- b %>%
separate(data = Frequency, into = Freq, sep = '   ')
b <- b %>%
separate(into = Freq, sep = '   ')
b <- b %>%
separate(col = Freq, sep = '   ')
b <- b %>%
separate(col = Frequency, sep = '   ')
b <- b %>%
separate(col = Frequency, into = b, sep = '   ')
b <- b %>%
separate(col = Frequency, into = 'Freq', sep = '   ')
aaa <- read.csv("C:/Users/JuanBetancur/OneDrive - SEI/World Bank PoC SDG connections methodology/FY_2022/Previous methodology/data/Percent.csv")
aaa <- aaa %>% select(-N.of.Documents)
b <- aaa %>% gather(Target, Frequency, SDG.1.1:SDG.17.19)
b <- b %>%
mutate(Target = str_replace_all(Target, 'SDG.', 'SDG '))
c <- b %>%
separate(col = Frequency, into = 'Freq', sep = '   ')
View(c)
colnames(c) <- c('Project', 'Target', 'Frequency')
c <- identify_SDGs(c)
c <- c %>% select(-Target)
c %>% group_by(Project, SDG) %>% summarise(n = n())
c %>% group_by(Project, SDG)
c %>% group_by(Project, SDG) %>%
summarise(Freqs = sum(Frequency))
aaa <- read.csv("C:/Users/JuanBetancur/OneDrive - SEI/World Bank PoC SDG connections methodology/FY_2022/Previous methodology/data/Percent.csv")
aaa <- aaa %>% select(-N.of.Documents)
b <- aaa %>% gather(Target, Frequency, SDG.1.1:SDG.17.19)
b <- b %>%
mutate(Target = str_replace_all(Target, 'SDG.', 'SDG '))
c <- b %>%
separate(col = Frequency, into = 'Freq', sep = '   ')
colnames(c) <- c('Project', 'Target', 'Frequency')
c <- identify_SDGs(c)
c <- c %>% select(-Target)
c %>% group_by(Project, SDG) %>%
summarise(Freqs = sum(Frequency))
c %>% group_by(Project) %>%
summarise(Freqs = sum(Frequency))
c %>% group_by(Project, SDG) %>%
summarise(Freqs = sum(Frequency))
c %>% group_by(Project, SDG) %>%
summarise(Freqs = col_sum(Frequency))
c %>% group_by(Project, SDG) %>%
summarise(Freqs = col.sum(Frequency))
c %>% group_by(Project, SDG) %>%
summarise(Freqs = sum(Frequency))
results_matrix(c)
str(c)
c$Frequency <- as.numeric(c%Frequency)
c$Frequency <- as.numeric(c$Frequency)
c %>% group_by(Project, SDG) %>%
summarise(Freqs = sum(Frequency))
c <- %>% arrange(Project, SDG)
c <- c %>% arrange(Project, SDG)
c <- c %>% group_by(Project, SDG) %>%
summarise(Freqs = sum(Frequency)) %>%
arrange(Project, str_sort(SDG, numeric = TRUE))
c <- c %>% arrange(Project, str_sort(SDG, numeric = TRUE))
c <- c %>% mutate(SDG = str_replace_all(SDG, 'SDG ', ''))
c <- c %>% arrange(Project, str_sort(SDG, numeric = TRUE))
c$SDG <- as.numeric(c$SDG)
c <- c %>% arrange(Project, SDG)
c <- c %>% mutate(SDG = glue('SDG {SDG}'))
ccc <- c %>% reshape(idvar = 'Project', timevar = 'SDG', direction = 'wide')
View(ccc)
ccc <- c %>% reshape(idvar = Project, timevar = SDG, direction = 'wide')
ccc <- c %>% reshape(idvar = Project, timevar = 'SDG', direction = 'wide')
ccc <- c %>% reshape(idvar = 'Project', timevar = 'SDG', direction = 'wide')
ccc <- reshape(c, idvar = 'Project', timevar = 'SDG', direction = 'wide')
ccc <- c %>% spread(c, key = SDG, value = Freqs)
c <- c %>% replace_na(c(0, 0, 0))
c <- c %>% replace_na(list(0, 0, 0))
ccc <- c %>% spread(c, key = SDG, value = Freqs)
is.na(c$Freqs)
c <- c %>% replace_na(list(Project = 0, SDG = 0, Freqs =0))
c <- c %>% replace_na(list(Project = '0', SDG = '0', Freqs =0))
is.na(c$Freqs)
ccc <- c %>% spread(c, key = SDG, value = Freqs)
ccc <- c %>% spread(key = SDG, value = Freqs)
c <- c %>% mutate(SDG = str_replace_all(SDG, 'SDG ', ''))
c <- c %>% arrange(Project, SDG)
c <- c %>% arrange(Project, SDG)
c$SDG <- as.numeric(c$SDG)
c <- c %>% arrange(Project, SDG)
ccc <- c %>% spread(key = SDG, value = Freqs)
colnames(ccc) <- glue('SDG {ccc}')
ccc <- c %>% spread(key = SDG, value = Freqs)
colnames(ccc) <- glue('SDG {colnames(ccc)}')
write.csv(ccc, 'AAAAA.csv', row.names=F)
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(tm)
library(SnowballC)
library(caTools)
library(randomForest)
library(showtext)
source(here('src', 'DataReader.R'))
source(here('src', 'Mapper.R'))
source(here('src', 'ViewResults.R'))
# ====== Loading the saved data instead of processing it again =================
texts <- extract('PADs')
text
textas
texts
# You can tidy the extracted texts
tidy <- tidify(texts,
token='sentences',
low_lim = 0.65,
up_lim = 0.7,
export_json = TRUE,
version_name = 'PADs')
View(tidy)
# You can tidy the extracted texts
tidy <- tidify(texts,
token='sentences',
low_lim = 0.67,
up_lim = 0.69,
export_json = TRUE,
version_name = 'PADs')
library(xlsx)
write.xlsx(tidy, "EUT_test.xlsx", sheetName = "Sheet 1",)
xlsx::write.xlsx(tidy, "EUT_test.xlsx", sheetName = "Sheet 1", col.names = TRUE, row.names = FALSE)
R.version()
R.Version()
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(tm)
library(SnowballC)
library(caTools)
library(randomForest)
library(showtext)
source(here('src', 'DataReader.R'))
source(here('src', 'Mapper.R'))
source(here('src', 'ViewResults.R'))
# --------------------------- or Using previously pre-processed results
tidy <- from_saves('PADs')
library(xlsx)
xlsx::write.xlsx(tidy, "EUT_training.xlsx")
write.csv(tidy, "EUT_training.csv", row.names = FALSE)
# --------------------------- or Using previously pre-processed results
tidy <- from_saves('PADs')
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(tm)
library(SnowballC)
library(caTools)
library(randomForest)
library(showtext)
source(here('src', 'DataReader.R'))
source(here('src', 'Mapper.R'))
source(here('src', 'ViewResults.R'))
# You can tidy the extracted texts
tidy <- tidify(texts,
token='sentences',
low_lim = 0.65,
up_lim = 0.7,
export_json = TRUE,
version_name = 'PADs')
# ====== Loading the saved data instead of processing it again =================
texts <- extract('PADs')
# --------------------------- or Using previously pre-processed results
tidy <- from_saves('PADs')
View(tidy)
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(tm)
library(SnowballC)
library(caTools)
library(randomForest)
library(showtext)
source(here('src', 'DataReader.R'))
source(here('src', 'Mapper.R'))
source(here('src', 'ViewResults.R'))
source(here('src', 'AnalysisModule.R'))
mode_selector()
cli({cli_text("Please, select the agenda that you want to map ",
"your projects to: \n\n")
cli_text(glue("\n\n",
col_green("1) "), "Sustainable Development Goals."))
cli_text(glue(
col_green("2) "), "European Taxonomy for Sustainable Activities."))})
cli({cli_text("Please, select the agenda that you want to map ",
"your projects to: \n\n")
cli_text("")
cli_text(glue("\n\n",
col_green("1) "), "Sustainable Development Goals."))
cli_text(glue(
col_green("2) "), "European Taxonomy for Sustainable Activities."))})
cli({
cli_text("Please, select the agenda that you want to map ",
"your projects to: \n\n")
cli_text("")
cli_text(glue(col_green("1) "), "Sustainable Development Goals."))
cli_text(glue(
col_green("2) "),
"European Taxonomy for Sustainable Activities."
))
})
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
cat("\f")
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
cli_text("Please, press {col_green('ENTER ')} to continue")
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
library(DBI)
library(RSQLite)
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
import_dependencies <- function() {
library(caTools)
library(cli)
library(DBI)
library(ggplot2)
library(ggraph)
library(glue)
library(here)
library(igraph)
library(jsonlite)
library(pdftools)
library(randomForest)
library(readr)
library(RSQLite)
library(showtext)
library(SnowballC)
library(sysfonts)
library(tidygraph)
library(tidytext)
library(tidyverse)
library(tm)
source(here('src', 'DataReader.R'))
source(here('src', 'Mapper.R'))
source(here('src', 'ViewResults.R'))
source(here('src', 'AnalysisModule.R'))
}
import_dependencies()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
source(here('src', 'AnalysisModule.R'))
run_mapper(analysis_mode = 'test',
save_tidy_texts = FALSE,
tidy_texts_filename = 'Test',
export_summaries = TRUE)
run_mapper(save_tidy_texts = FALSE,
tidy_texts_filename = 'Test',
export_summaries = TRUE)
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper(save_tidy_texts = FALSE,
tidy_texts_filename = 'Test',
export_summaries = TRUE)
library(caTools)
library(cli)
library(DBI)
library(ggplot2)
library(ggraph)
library(glue)
library(here)
library(igraph)
library(jsonlite)
library(pdftools)
library(randomForest)
library(readr)
library(RSQLite)
library(showtext)
library(SnowballC)
library(sysfonts)
library(tidygraph)
library(tidytext)
library(tidyverse)
library(tm)
source(here('src', 'DataReader.R'))
source(here('src', 'Mapper.R'))
source(here('src', 'ViewResults.R'))
source(here('src', 'AnalysisModule.R'))
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
source("~/GitHub/WB_Text_Analysis/src/DataReader.R")
source("~/GitHub/WB_Text_Analysis/src/DataReader.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/DataReader.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/DataReader.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/DataReader.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/DataReader.R")
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
source("~/GitHub/WB_Text_Analysis/src/DataReader.R")
source("~/GitHub/WB_Text_Analysis/src/Mapper.R")
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/ViewResults.R")
library(caTools)
library(cli)
library(DBI)
library(ggplot2)
library(ggraph)
library(glue)
library(here)
library(igraph)
library(jsonlite)
library(pdftools)
library(randomForest)
library(readr)
library(RSQLite)
library(showtext)
library(SnowballC)
library(sysfonts)
library(tidygraph)
library(tidytext)
library(tidyverse)
library(tm)
source(here('src', 'DataReader.R'))
source(here('src', 'Mapper.R'))
source(here('src', 'ViewResults.R'))
source(here('src', 'AnalysisModule.R'))
# ====== Loading the saved data instead of processing it again =================
texts <- extract('Test')
View(texts)
texts$Text[1]
texts$Text[2]
View(texts)
tidify(texts)
a <- tidify(texts)
View(a)
write.csv(a, 'aaa.csv')
run_mapper()
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
source(here('src', 'AnalysisModule.R'))
source("~/GitHub/WB_Text_Analysis/src/AnalysisModule.R")
import_dependencies()
run_mapper()
