# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = TRUE)
View(main_SDGs)
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = FALSE)
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = FALSE)
main_SDGs$SDG
length(main_SDGs$SDG)
length(main_SDGs$SDG)
length(main_SDGs$SDG)
main_SDGs$SDG
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = FALSE)
main_SDGs$SDG
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(showtext)
source(here('DataReader.R'))
source(here('ViewResults.R'))
source(here('AnalysisModule.R'))
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
tidy <- from_saves('Test') # --------------------------- Using the saved results
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
results <- generate_testData(tidy)
results <- identify_SDGs(results)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
View(matrix_absolute)
matrix_absolute <- matrix_absolute %>%
mutate(main_SDG = NULL)
aaa <- matrix_absolute
View(aaa)
aaa <- matrix_absolute %>%
rowwise() %>%
mutate(main_SDG = paste0(names(.)[c_across() == max(c_across())],
collapse = '_'
)
)
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
matrix_absolute <- matrix_absolute %>%
mutate(main_SDG = NULL) %>%
set_index(Project)
matrix_absolute <- matrix_absolute %>%
mutate(main_SDG = NULL) %>%
column_to_rownames(Project)
matrix_absolute <- matrix_absolute %>%
mutate(main_SDG = NULL) %>%
column_to_rownames('Project')
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
matrix_absolute <- matrix_absolute %>%
mutate(main_SDG = NULL, Unit = NULL) %>%
column_to_rownames('Project')
aaa <- matrix_absolute %>%
rowwise() %>%
mutate(main_SDG = paste0(names(.)[c_across() == max(c_across())],
collapse = '_'
)
)
generate_color_palette()
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
generate_color_palette()$SDG
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
View(matrix_relative)
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
View(matrix_relative)
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
View(matrix_relative)
matrix_relative <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
View(matrix_relative)
matrix_results <- mapping_res %>%
count_matches(by = 'SDG',
sorted = 'Frequency',
collapse_projects = FALSE) %>%
dplyr::mutate(Color = NULL)
matrix_results <- results %>%
count_matches(by = 'SDG',
sorted = 'Frequency',
collapse_projects = FALSE) %>%
dplyr::mutate(Color = NULL)
View(matrix_results)
matrix_results <- results %>%
count_matches(by = 'SDG',
sorted = 'Frequency',
collapse_projects = FALSE) %>%
dplyr::mutate(Color = NULL) %>%
column_to_rownames(Project)
matrix_results <- results %>%
count_matches(by = 'SDG',
sorted = 'Frequency',
collapse_projects = FALSE) %>%
dplyr::mutate(Color = NULL) %>%
column_to_rownames('Project')
matrix_results <- results %>%
count_matches(by = 'SDG',
sorted = 'Frequency',
collapse_projects = FALSE) %>%
dplyr::mutate(Color = NULL)
matrix_results <- pivot_wider(matrix_results,
names_from = 'SDG',
values_from = 'Frequency')
matrix_results <- matrix_results %>%
dplyr::select(str_sort(colnames(matrix_results), numeric = TRUE))
matrix_results <- matrix_results %>%
dplyr::select(str_sort(colnames(matrix_results), numeric = TRUE)) %>%
replace(is.na(.), 0) %>%
column_to_rownames('Project')
matrix_results <- results %>%
count_matches(by = 'SDG',
sorted = 'Frequency',
collapse_projects = FALSE) %>%
dplyr::mutate(Color = NULL)
matrix_results <- pivot_wider(matrix_results,
names_from = 'SDG',
values_from = 'Frequency')
projects <- as.list(matrix_results %>% select(Project))[[1]]
matrix_results <- matrix_results %>%
dplyr::select(str_sort(colnames(matrix_results), numeric = TRUE)) %>%
replace(is.na(.), 0) %>%
column_to_rownames('Project')
# Identifying the main goals -----------------------------------------------
main_goals <- matrix_results %>%
rowwise() %>%
mutate(main_SDG = paste0(names(.)[c_across() == max(c_across())],
collapse = '_'
))
View(main_goals)
main_goals <- main_goals %>% select(main_SDG)
View(main_goals)
main_goals
main_goals[[1]]
main_goals <- main_goals[[1]]
matr_res <- matrix_results
# Relative______________________________
# for (i in 1:nrow(matrix_results)) {
matrix_results[i, ] <-
round(100 * matrix_results[i, ] / sum(matrix_results[i, ]), 0)
# Relative______________________________
for (i in 1:nrow(matrix_results)) {
matrix_results[i, ] <-
round(100 * matrix_results[i, ] / sum(matrix_results[i, ]), 0)
}
matrix_results <- matr_res
# Relative______________________________
for (i in 1:nrow(matrix_results)) {
matrix_results[i, ] <-
round(100 * matrix_results[i, ] / sum(matrix_results[i, ]), 1)
}
matrix_results %>%
rownames_to_column()
matrix_results %>%
rownames_to_column('Project')
#Add all rows
matrix_results <- matrix_results %>% rownames_to_column('Project')
matrix_results <- matrix_results %>%
add_column(Unit = rep('%', nrow(matrix_results)), .after = 1,
Main_SDG = main_goals)
matrix_results <- matr_res
#Add all rows
matrix_results <- matrix_results %>%
rownames_to_column('Project') %>%
add_column(Unit = rep('%', nrow(matrix_results)), .after = 1) %>%
add_column(Main_SDG = main_goals)
source("~/GitHub/WB_Text_Analysis/ViewResults.R")
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(showtext)
source(here('DataReader.R'))
source(here('ViewResults.R'))
source(here('AnalysisModule.R'))
tidy <- from_saves('Test') # --------------------------- Using the saved results
results <- generate_testData(tidy)
results <- identify_SDGs(results)
matrix_relative <- results_matrix(results,
relative_freqs = TRUE,
with_main_SDG = TRUE)
matrix_absolute <- results_matrix(results,
relative_freqs = FALSE,
with_main_SDG = TRUE)
View(matrix_absolute)
View(matrix_relative)
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(showtext)
source(here('DataReader.R'))
source(here('ViewResults.R'))
source(here('AnalysisModule.R'))
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
source("~/GitHub/WB_Text_Analysis/DataReader.R")
output_folder('img')
outputs_folder('img')
source("~/GitHub/WB_Text_Analysis/DataReader.R")
outputs_folder('img')
outputs_folder <- function(kind) {
kind <- str_to_title(kind)
options <- read_file(here(glue('Settings/output_folders.txt')))
options <- str_split(options, ', ')
return(options[1])
}
outputs_folder('img')
outputs_folder <- function(kind) {
kind <- str_to_title(kind)
options <- read_file(here(glue('Settings/output_folders.txt')))
options <- str_split(options, ', ')
return(options)
}
outputs_folder('img')
outputs_folder('img')[1]
outputs_folder('img')[2]
outputs_folder('img')[{2}]
outputs_folder('img')[[2]]
outputs_folder('img')[[1]]
outputs_folder('img')
outputs_folder <- function(kind) {
kind <- str_to_title(kind)
options <- read_file(here(glue('Settings/output_folders.txt')))
options <- str_split(options, ', ')[[1]]
if (kind == 'Img') {
return(options)[[1]]
}
if (kind == 'Data') {
return(options)[[2]]
}
return(options)
}
outputs_folder('img')
outputs_folder <- function(kind) {
kind <- str_to_title(kind)
options <- read_file(here(glue('Settings/output_folders.txt')))
options <- str_split(options, ', ')[[1]]
if (kind == 'Img') {
return(options[1])
}
if (kind == 'Data') {
return(options[2])
}
return(options)
}
outputs_folder('img')
outputs_folder('data')
source("~/GitHub/WB_Text_Analysis/DataReader.R")
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
source("~/GitHub/WB_Text_Analysis/DataReader.R")
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
source("~/GitHub/WB_Text_Analysis/DataReader.R")
extract('Test')
source("~/GitHub/WB_Text_Analysis/AnalysisModule.R")
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
source("~/GitHub/WB_Text_Analysis/DataReader.R")
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(showtext)
source(here('DataReader.R'))
source(here('ViewResults.R'))
source(here('AnalysisModule.R'))
# ====== Setting up text fonts =================================================
initialise_fonts()
# ====== Loading the saved data instead of processing it again =================
texts <- extract('Test')
tidy <- tidify(texts, token='sentences', low_lim = 0, up_lim=1,
export_json=TRUE, version_name='Test')
source("~/GitHub/WB_Text_Analysis/DataReader.R")
tidy <- tidify(texts, token='sentences', low_lim = 0, up_lim=1,
export_json=TRUE, version_name='Test')
# Using test data
results <- generate_testData(tidy)
results <- identify_SDGs(results)
# Total matches by project -------------------------------> can feed a histogram
matches_T <- count_matches(results,
by = 'total_matches',
sorted = 'Frequency')
# Total matches by Project and SDG ---------------------> can feed a column plot
matches_SDG <- count_matches(results,
by = 'SDG',
sorted = 'Frequency',
collapse_projects = TRUE)
# Total matches by Project and Target ------------------> can be exported as csv
matches_tgt <- count_matches(results,
by = 'Target',
sorted = 'Frequency',
collapse_projects = TRUE)
# Binary occurrence results by SDG ---------------------> can be exported as csv
occurrence_SDG <- count_occurrence(results,
by = 'SDG',
collapse_projects = TRUE)
# Identify the main SDG in each project. From binary == TRUE identifies the main
# SDG with the sum of the binary frequencies (presence or absence of a target)
# of all targets in a SDG.
# -------------------------------> can feed a column plot and be exported to csv
main_SDGs <- get_main_SDG(results,
from_binary = FALSE,
collapse_SDG = FALSE)
SDGs_proj <- get_SDGs_proj(results)
occurrence_SDG %>% plot_results(title = 'Testing',
xlabel = 'SDG',
ylabel = 'Number of projects',
# savefig = TRUE,
# figname = 'Test 1',
scale = 1)
matches_SDG %>% plot_results(title='Testing 2',
xlabel='SDG',
ylabel='Number of matches',
# savefig = TRUE,
# figname = 'Test 2',
scale = 1)
main_SDGs %>% plot_results(title = 'Testing main',
xlabel = 'SDG',
ylabel = 'Number of projects',
# savefig = TRUE,
# figname = 'Test 3',
scale = 1)
results %>% plot_SDG_distribution(
binwidth = 2,
title = "Testing 3",
test = TRUE)
# Generate network from results --------------------
net <- generate_network(results)
plot_network(results)
graph <- plot_network(results)
source("~/GitHub/WB_Text_Analysis/AnalysisModule.R")
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
source("~/GitHub/WB_Text_Analysis/AnalysisModule.R")
preset_analysis(analysis_mode = 'test',
data_from_saves = TRUE,
saved_data_name = 'Test',
save_tidy_texts = FALSE,
tidy_texts_filename = NULL,
export_summaries = TRUE)
preset_analysis(analysis_mode = 'test',
save_tidy_texts = FALSE,
tidy_texts_filename = 'Test',
export_summaries = TRUE)
preset_analysis(analysis_mode = 'test',
save_tidy_texts = FALSE,
tidy_texts_filename = 'Test',
export_summaries = TRUE)
preset_analysis(analysis_mode = 'test',
save_tidy_texts = FALSE,
tidy_texts_filename = 'Test',
export_summaries = TRUE)
library(here)
library(ggplot2)
library(ggraph)
library(tidygraph)
library(igraph)
library(showtext)
source(here('DataReader.R'))
source(here('ViewResults.R'))
source(here('AnalysisModule.R'))
preset_analysis(analysis_mode = 'test',
save_tidy_texts = FALSE,
tidy_texts_filename = 'Test',
export_summaries = TRUE)
preset_analysis(analysis_mode = 'test',
save_tidy_texts = FALSE,
tidy_texts_filename = 'Test',
export_summaries = TRUE)
